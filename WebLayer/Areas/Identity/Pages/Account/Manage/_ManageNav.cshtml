@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    var user = await UserManager.GetUserAsync(this.User);
    string imgSrc = "https://post.medicalnewstoday.com/wp-content/uploads/sites/3/2020/02/322868_1100-800x825.jpg";
    if (user.Image != null)
    {
        var base64 = Convert.ToBase64String(user.Image);
        imgSrc = string.Format("data: image/jpeg; base64, {0}", base64);
    }
}
<div class="container">
    <div class="row">
        <div class="col-sm-12 col-md-12 col-xl-12">
            <div class="card">
                <div class="card-body">
                    <div class="pb-3 mb-3">
                        <div class="pt-3 text-center">
                            <label for="image_uploads">
                                <img src="@imgSrc" height="100px" class="rounded-circle" id="preview_image">
                            </label>
                            <input type="file" id="image_uploads" name="image_uploads" accept=".jpg, .jpeg, .png"
                                style="opacity: 0;">
                        </div>
                        <div class="text-center fs-3"> @user.FullName </div>
                        <div class="text-center fs-7 fw-light font-monospace"> @user.Email </div>
                    </div>
                    <div class="text-center">
                        <h5 class="text-primary fw-bold">About</h5>
                        <div class="lead">
                            @user.About
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    var input = document.querySelector("#image_uploads");
    var preview = document.querySelector("#preview_image");
    input.addEventListener("change", UpLoadImage);
    function UpLoadImage() {
        const currentFile = input.files;
        if (currentFile.length == 1) {
            if (validImageType(currentFile[0])) {
                let image = document.querySelector("#preview_image");
                image.src = URL.createObjectURL(currentFile[0]);
                UpdateUserAvatar(currentFile[0]);
            } else {
                 notify("Invalid image extension", "error");
            }              
        } else notify("No file choosen", "error");
    }

    function UpdateUserAvatar(file) {
        var form = new FormData();
        form.append("UserAvatar", file);
        var urlAction = '@Url.Action("UpdateUserImageProfile", "FileHandler")';
        // update image to database using ajax
        $.ajax({
            type: "POST",
            url: urlAction,
            data: form,

            cache: false,
            contentType: false,
            processData: false,

            success: function (data) {
                if (data.success) {
                    notify(data.message, "success");
                } else {
                    notify(data.message, "error");
                }
            }
        });
        console.log("Submited");
        return false;
    }

    const fileTypes = [
        'image/apng',
        'image/bmp',
        'image/gif',
        'image/jpeg',
        'image/pjpeg',
        'image/png',
        'image/svg+xml',
        'image/tiff',
        'image/webp',
        `image/x-icon`
    ];
    function validImageType(file) {
        return fileTypes.includes(file.type);
    }
</script>